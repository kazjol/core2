判断使用单调栈的条件：
    需要找"最近"或"下一个"更大/更小的元素
    需要维护一个单调的序列
    需要处理滑动窗口的最值问题
    优化资源分配
选择栈的类型：***
    单调递增栈：用于找下一个更小的元素
    单调递减栈：用于找下一个更大的元素
存储内容的选择：
    存储索引：当需要计算距离或位置关系时
    存储值：当只需要比较大小关系时
常见优化技巧：
    使用双端队列代替栈，实现更灵活的操作
    结合哈希表存储额外信息
    使用数组模拟栈，提高性能
注意：
    处理边界情况（栈为空）
    处理重复元素
    考虑是否需要处理相等的


# 单调栈一定要用到while

温度/高度类问题
    特点：需要找每个元素后面第一个比它大/小的元素
典型题目：
    每日温度（当前题目）：找每个温度后面第一个更高的温度
    柱状图问题：找每个柱子左右两边第一个比它小的柱子
    温度变化趋势：找温度上升/下降的区间
     # 单调递减栈模板
     stack = []
     for i in range(n):
         while stack and nums[i] > nums[stack[-1]]:
             preIndex = stack.pop()
             # 处理结果
         stack.append(i)

股票交易：
    特点：需要找某个时间点之前/之后的最大/最小值
典型题目：
    股票价格跨度：找之前连续小于等于当前价格的天数
    买卖股票的最佳时机：找价格的最低点和最高点
     # 单调递增栈模板
     stack = []
     for i in range(n):
         while stack and prices[i] < prices[stack[-1]]:
             stack.pop()
         # 计算跨度或收益
         stack.append(i)

区间最值问题
    特点：需要维护一个滑动窗口内的最大值/最小值
典型题目：
    滑动窗口最大值
    队列的最大值
    数据流中的中位数
     # 双端队列实现单调栈
     from collections import deque
     dq = deque()
     for i in range(n):
         while dq and nums[dq[-1]] < nums[i]:
             dq.pop()
         dq.append(i)
         # 处理窗口大小
         if i - dq[0] >= k:
             dq.popleft()

字符串处理类
    特点：需要维护一个单调的字符序列
典型题目：
    去除重复字母
    移掉K位数字
    字符串去重
     # 字符单调栈模板
     stack = []
     for char in s:
         while stack and char < stack[-1] and count[stack[-1]] > 0:
             stack.pop()
         stack.append(char)