核心特征完全符合0-1背包问题的定义：
每次只有两种选择
有n个物品(草药)，每个物品有两个属性：成本(采集时间)和价值
有一个容量限制(总时间t)
每个物品只能选择取或不取(0或1)，不能部分选择
目标是在容量限制下最大化总价值

## 有限制（背包容量）的进行选择 使结果最优
    每个物品有'重量' 填满背包容量 建模化
    遍历顺序：先物品 后背包
### 0-1 背包问题 （只能选一次）逆序遍历容量
### 完全背包问题 （多次选择）  正序遍历容量

背包在计算机科学和算法领域中，通常指背包问题（Knapsack Problem），是动态规划和组合优化中的一个经典数学模型。其核心目标是在

有限的背包容量约束下，选择物品以实现价值最大化。以下是详细解释：

1. 基本概念
问题场景：
给定一组物品，每个物品有体积（或重量）和价值，以及一个固定容量的背包。如何选择物品放入背包，使得总价值最大，且总体积不超过背包容量？

核心要素：
物品集合：每个物品有体积 v_i 和价值 w_i。
背包容量 V。
目标：最大化总价值 Σw_i，且 Σv_i ≤ V。

2. 背包问题的分类
(1) 0-1 背包问题
特点：每个物品只能选或不选（0或1次）。

典型应用：
如珠宝盗窃问题（每件珠宝只能拿或不拿）。

状态转移方程：

python
dp[j] = max(dp[j], dp[j - v_i] + w_i)  # *逆序*更新容量

(2) 完全背包问题
特点：每个物品可以无限次选取。

典型应用：
如硬币兑换问题（硬币无限供应）。

状态转移方程：

python
dp[j] = max(dp[j], dp[j - v_i] + w_i)  # *正序*更新容量
(3) 其他变种
多重背包：每个物品最多选 k 次。

分组背包：物品分组，每组只能选一个。

多维背包：容量限制为多个维度（如体积+重量）。

3. 动态规划的核心思想
状态定义：
dp[j] 表示容量为 j 的背包能获得的最大价值。

填表策略：
通过逐步考虑每个物品，更新不同容量下的最优解。

时间复杂度：

0-1背包：O(nV)（物品数 n，容量 V）。

完全背包：O(nV)，但遍历顺序不同。

4. 实际例子
0-1背包示例
物品：[(体积2, 价值3), (体积3, 价值4), (体积4, 价值5)]

背包容量：5

最优解：选物品1和2，总价值 3+4=7。

完全背包示例
物品：[(体积2, 价值3), (体积3, 价值4)]

背包容量：6

最优解：选3个物品1，总价值 3×3=9。