# 买卖股票的最佳时机 II
# 贪心 数组 动态规划dp Dynamic Programming

# 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
# 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
# 返回 你能获得的 最大 利润 。


# 示例 1：
# 输入：prices = [7,1,5,3,6,4]
# 输出：7
# 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
# 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。
# 最大总利润为 4 + 3 = 7 。

from typing import List
print('od解法 贪心')
# 只要有正利润就卖出
# 遍历整个股票交易日价格列表 prices，并执行贪心策略：所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）。
# 只赚不亏的利润最大


# 学习思想： 把跨越多天的买卖转为每天的买卖 也是降维问题

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 最大利润初始为 0
        profit = 0

        # 从第 2 天开始（索引为 1 ）
        # 去查看当天是否需要采取【卖出】的操作
        for i in range(1, len(prices)):

            # 计算当天的股票价格与昨天的股票价格的差值
            # 从第二天的价格判断上一天是否买进 因为是根据上一天价格判断的所以总能盈利 且赚到所有利润
            # 就算从最低价格买入 最高价格卖出利润也不会是最高因为限制了天数 这样做会减少交易次数 后续出现连降则没有买入时机
            # 股票后期出现连降  后续交易只会出现亏损所以不能交易
            tmp = prices[i] - prices[i - 1]

            # 如果发现当天的股票价格大于了昨天的股票价格
            # 那么在当天采取【卖出】操作可以带来正向收益，即产生利润
            # 于是完全可以卖出
            # 而这个利润就可以进行累加起来
            if tmp > 0: profit += tmp

            # 如果发现当天的股票价格小于了昨天的股票价格
            # 那么不能采取【卖出】操作，因为这会带来负向收益，即产生亏损
            # 导致总的利润值变小

        # 返回结果
        return profit
prices = [7,1,5,3,6,4]
print(Solution().maxProfit(prices))
